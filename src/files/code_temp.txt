(1)
# def click_and_crawl(update_num,week_num,p):
#     click_and_setting_s_time = time.time()
#     driver.implicitly_wait(5)
#
#     driver.find_element(By.XPATH, '//*[@id="fboardlist"]/div[4]/ul/li[%d]/a' %p).click()
#     response = requests.get(driver.current_url, headers={
#         'User-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115.0.0.0 Safari/537.36'})
#     html = response.text
#     soup = BeautifulSoup(html, 'html.parser')
#     webtoon_list = soup.find_all('li', {'data-weekday': week[week_num]})
#     detail_pages = driver.find_elements(By.CSS_SELECTOR,'div.img-item>a')
#     images = driver.find_elements(By.CSS_SELECTOR, 'div.img-item>a>img')
#     names = driver.find_elements(By.CSS_SELECTOR, 'div.img-item>div>a>span')
#     click_and_setting_e_time = time.time()
#
#     single_toon_img_s_time = time.time()
#     for image, name in zip(images, names):
#         new_name = re.sub(r"[^\uAC00-\uD7A30-9a-zA-Z\s]", "", name.text)
#         temp = requests.get(image.get_attribute('src'))
#         with open(f'src/img/{new_name}.png', "wb") as outfile:
#             outfile.write(temp.content)
#     single_toon_img_e_time = time.time()
#
#     for i, webtoon in enumerate(webtoon_list):
#         # wb_siteInfo[C2]에 나중에 업데이트를 쉽게하기 위해 이름만 저장해놓고
#         # wb_webtoon[A2]에 웹툰 제목 저장
#         wb_siteInfo['C%d' %update_num] = webtoon['date-title']
#         wb_webtoon['A%d' %update_num] = webtoon['date-title']
#
#         # wb_webtoon[F~R 2]에 해당하는거 저장
#         genre = webtoon['data-genre'].split(',')
#         for i, g in enumerate(genre):
#             if g in cell_alp.keys():
#                 wb_webtoon[cell_alp[g] + '%d' % update_num] = 1
#
#         # wb_webtoon[S2]에 저장
#         wb_webtoon['S%d' % update_num] = webtoon['data-weekday']
#
#         # wb_webtoon[V2]에 저장
#         detail_url = detail_pages[i].get_attribute('href')
#         wb_webtoon['V%d'%update_num] = detail_url
#
#         update_num += 1
#
#     pth_page_e_time = time.time()
#
#     print("다음페이지 클릭 후 세팅 시간 : " + str(click_and_setting_e_time-click_and_setting_s_time))
#     print("한 웹툰 이미지 저장시간 : " + str(single_toon_img_e_time-single_toon_img_s_time))
#     print(f"{p-2}번째 페이지 총 실행시간 : " + str(pth_page_e_time-click_and_setting_s_time))
#     return update_num


(2)
# page_num = first_page(url)
# print(page_num)
# # 월요일
# p = 1
# total_page, update_num = first_page_crawl(update_num,0)
# wb.save(fpath)
# now = datetime.now()
# print("월요일 Page 1 End")
# print("현재 시간 : " + str(now.hour) + "시 " + str(now.minute) + "분 " + str(now.second) +"초\n")
#
# for p in range(4,total_page):
#     update_num = click_and_crawl(update_num,0)
#     now = datetime.now()
#     print("월요일 Page " + str(p - 2) + " End")
#     print("현재 시간 : " + str(now.hour) + "시 " + str(now.minute) + "분 " + str(now.second) + "초\n")
#     wb.save(fpath)


(3)
# 화요일 ~ 열흘
# for w in range(1, len(week)):
#     other_day_click_s_time = time.time()
#     driver.implicitly_wait(5)
#     driver.find_element(By.XPATH,
#                         '//*[@id="content_wrapper"]/div[2]/div/section/div[1]/form/table/tbody/tr[2]/td/span[%c]' %str(w+2)).click()
#     driver.find_element(By.XPATH,
#                         '//*[@id="content_wrapper"]/div[2]/div/section/div[1]/form/table/tbody/tr[1]/td[2]/button').send_keys(
#         Keys.ENTER)
#     other_day_click_e_time = time.time()
#     print("다른 요일 클릭 시간 : "+ str(other_day_click_e_time-other_day_click_s_time))

#     total_page, update_num = first_page_crawl(update_num, w)
#     wb.save(fpath)
#     print(week[w] + " Page 1 End\n")
#     print("현재 시간 : " + str(now.hour) + "시 " + str(now.minute) + "분 " + str(now.second) +"초\n")
#     for p in range(4, total_page):
#         update_num = click_and_crawl(update_num, w)
#         print(week[w] + " Page " + str(p - 2) + " End\n")
#         print("현재 시간 : " + str(now.hour) + "시 " + str(now.minute) + "분 " + str(now.second) +"초\n")
#         wb.save(fpath)

(4)
    # for image, name in zip(images,names):
    #     new_name = re.sub(r"[^\uAC00-\uD7A30-9a-zA-Z\s]","",name.text)
    #     temp = requests.get(image.get_attribute('src'))
    #     with open(f'src/img/{update_num}.png', "wb") as outfile:
    #         outfile.write(temp.content)